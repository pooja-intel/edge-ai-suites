From ed5105c63714c4d21fe3d64ce0bd19ebd3ec0e62 Mon Sep 17 00:00:00 2001
From: Jayabalaji <jayabalaji.sathiyamoorthi@intel.com>
Date: Fri, 14 Mar 2025 00:10:10 +0100
Subject: [PATCH 08/14] Add dependency debian (#8)

* Minor changes to the build dependencies

Signed-off-by: Sathiyamoorthi, Jayabalaji <jayabalaji.sathiyamoorthi@intel.com>

* Update the debian file to use libpangolin instead of building it from source

Signed-off-by: Sathiyamoorthi, Jayabalaji <jayabalaji.sathiyamoorthi@intel.com>

* Turn off old examples by default.
Build thirdparty libraries statically.

* Disable test.

* Split into three packages.

* Install to debian/tmp.
Add Bandit scan.

* Fix.

* Update build.yml

Upload artifacts to github instead of wheeljack, as the ECI build will take care of it.

* Update scan.yml

---------

Signed-off-by: Sathiyamoorthi, Jayabalaji <jayabalaji.sathiyamoorthi@intel.com>
Co-authored-by: Jeremy Ouillette <jeremy.ouillette@intel.com>
---
 .github/workflows/build.yml      |  32 +---
 .github/workflows/scan.yml       |  31 ++++
 CMakeLists.txt                   | 259 ++++++++++++++++---------------
 Thirdparty/DBoW2/CMakeLists.txt  |  18 ++-
 Thirdparty/Sophus/CMakeLists.txt |   4 +-
 Thirdparty/g2o/CMakeLists.txt    |  24 ++-
 build.sh                         |  18 +--
 debian/control                   |  17 +-
 debian/liborb-slam3-dev.install  |   1 +
 debian/liborb-slam3.install      |   1 +
 debian/orb-slam3-dev.install     |   1 -
 debian/orb-slam3.install         |   2 +-
 debian/orb-slam3.substvars       |   3 -
 debian/rules                     |  67 +++++---
 14 files changed, 282 insertions(+), 196 deletions(-)
 create mode 100644 .github/workflows/scan.yml
 create mode 100644 debian/liborb-slam3-dev.install
 create mode 100644 debian/liborb-slam3.install
 delete mode 100644 debian/orb-slam3-dev.install
 delete mode 100644 debian/orb-slam3.substvars

diff --git a/.github/workflows/build.yml b/.github/workflows/build.yml
index 5009aa4..8a89989 100644
--- a/.github/workflows/build.yml
+++ b/.github/workflows/build.yml
@@ -32,28 +32,12 @@ jobs:
         run: |
           dpkg-buildpackage -us -uc
 
+      - name: Upload packages
+        uses: actions/upload-artifact@v4
+        with:
+            name: orb-slam3-deb-packages
+            path: |
+                ./*.deb
+                !./*-build-deps_*.deb
+
       
-      - name: Deploy Development
-        shell: bash
-        run: |
-          echo "Uploading Debian packages to Development APT repository..."
-          exec 3>&1
-          for package in $(find .. -name "*.deb" -not -name "*-build-deps_*" -not -name "*-dbgsym_*"); do
-              status=$(curl -s -o >(cat >&3) -w %{http_code} -X PUT --upload-file "${package}" http://wheeljack.ch.intel.com:6799)
-              if [ ${status} != "201" ]; then
-                  exit 1
-              fi
-          done
-
-      - name: Deploy Pre-Production
-        if: (github.event_name == 'push' || github.event_name == 'workflow_dispatch')  && github.event.ref == 'refs/heads/main'
-        shell: bash
-        run: |
-          echo "Uploading Debian packages to Pre-Production APT repository..."
-          exec 3>&1
-          for package in $(find .. -name "*.deb" -not -name "*-build-deps_*" -not -name "*-dbgsym_*"); do
-              status=$(curl -s -o >(cat >&3) -w %{http_code} -X PUT --upload-file "${package}" http://wheeljack.ch.intel.com:6800)
-              if [ ${status} != "201" ]; then
-                  exit 1
-              fi
-          done
diff --git a/.github/workflows/scan.yml b/.github/workflows/scan.yml
new file mode 100644
index 0000000..a192fcc
--- /dev/null
+++ b/.github/workflows/scan.yml
@@ -0,0 +1,31 @@
+name: Scan
+
+on:
+  # Triggers the workflow on push or pull request events but only for the master branch
+  push:
+    branches: [ main ]
+  pull_request:
+    branches: [ main, maintenance* ]
+  workflow_dispatch:
+
+env:
+  http_proxy: http://proxy-dmz.intel.com:912
+  https_proxy: http://proxy-dmz.intel.com:912
+  no_proxy: localhost,127.0.0.1/8,ch.intel.com,ka.intel.com,devtools.intel.com,conjur.intel.com
+  
+jobs:
+  bandit:
+    name: Bandit
+    runs-on: [self-hosted, edge-controls]
+    steps:
+      - uses: actions/checkout@v4
+      - name: Get User/Group ID
+        run: |
+          echo "USER_ID=$(id -u ${USER})" >> $GITHUB_ENV
+          echo "GROUP_ID=$(id -u ${USER})" >> $GITHUB_ENV
+      - name: Scan
+        uses: intel-innersource/frameworks.devops.github.actions.bandit@main
+        with:
+          image_user: ${{ env.USER_ID }}
+          image_group: ${{ env.GROUP_ID }}
+
diff --git a/CMakeLists.txt b/CMakeLists.txt
index 0c20133..aeba869 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,6 +1,9 @@
 cmake_minimum_required(VERSION 2.8)
 project(ORB_SLAM3)
 
+option(BUILD_EXAMPLES_OLD "Build Examples (Old)" OFF)
+option(LINK_LIBRARY_STATIC "Link libraries statically" OFF)
+
 IF(NOT CMAKE_BUILD_TYPE)
   SET(CMAKE_BUILD_TYPE Release)
 ENDIF()
@@ -120,15 +123,27 @@ include/Settings.h)
 
 add_subdirectory(Thirdparty/g2o)
 
-target_link_libraries(${PROJECT_NAME}
-${OpenCV_LIBS}
-${EIGEN3_LIBS}
-${Pangolin_LIBRARIES}
-${PROJECT_SOURCE_DIR}/Thirdparty/DBoW2/lib/libDBoW2.so
-${PROJECT_SOURCE_DIR}/Thirdparty/g2o/lib/libg2o.so
--lboost_serialization
--lcrypto
-)
+if(LINK_LIBRARY_STATIC)
+    target_link_libraries(${PROJECT_NAME}
+    ${OpenCV_LIBS}
+    ${EIGEN3_LIBS}
+    ${Pangolin_LIBRARIES}
+    ${PROJECT_SOURCE_DIR}/Thirdparty/DBoW2/lib/libDBoW2.a
+    ${PROJECT_SOURCE_DIR}/Thirdparty/g2o/lib/libg2o.a
+    -lboost_serialization
+    -lcrypto
+    )
+else()
+    target_link_libraries(${PROJECT_NAME}
+    ${OpenCV_LIBS}
+    ${EIGEN3_LIBS}
+    ${Pangolin_LIBRARIES}
+    ${PROJECT_SOURCE_DIR}/Thirdparty/DBoW2/lib/libDBoW2.so
+    ${PROJECT_SOURCE_DIR}/Thirdparty/g2o/lib/libg2o.so
+    -lboost_serialization
+    -lcrypto
+    )
+endif()
 
 # If RealSense SDK is found the library is added and its examples compiled
 if(realsense2_FOUND)
@@ -275,121 +290,123 @@ endif()
 
 #Old examples
 
-# RGB-D examples
-set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/Examples_old/RGB-D)
-
-add_executable(rgbd_tum_old
-        Examples_old/RGB-D/rgbd_tum.cc)
-target_link_libraries(rgbd_tum_old ${PROJECT_NAME})
-
-if(realsense2_FOUND)
-    add_executable(rgbd_realsense_D435i_old
-            Examples_old/RGB-D/rgbd_realsense_D435i.cc)
-    target_link_libraries(rgbd_realsense_D435i_old ${PROJECT_NAME})
-endif()
-
-
-# RGB-D inertial examples
-set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/Examples_old/RGB-D-Inertial)
-
-if(realsense2_FOUND)
-    add_executable(rgbd_inertial_realsense_D435i_old
-            Examples_old/RGB-D-Inertial/rgbd_inertial_realsense_D435i.cc)
-    target_link_libraries(rgbd_inertial_realsense_D435i_old ${PROJECT_NAME})
-endif()
-
-#Stereo examples
-set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/Examples_old/Stereo)
-
-add_executable(stereo_kitti_old
-        Examples_old/Stereo/stereo_kitti.cc)
-target_link_libraries(stereo_kitti_old ${PROJECT_NAME})
-
-add_executable(stereo_euroc_old
-        Examples_old/Stereo/stereo_euroc.cc)
-target_link_libraries(stereo_euroc_old ${PROJECT_NAME})
-
-add_executable(stereo_tum_vi_old
-        Examples_old/Stereo/stereo_tum_vi.cc)
-target_link_libraries(stereo_tum_vi_old ${PROJECT_NAME})
+if(BUILD_EXAMPLES_OLD)
+	# RGB-D examples
+	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/Examples_old/RGB-D)
 
-if(realsense2_FOUND)
-    add_executable(stereo_realsense_t265_old
-            Examples_old/Stereo/stereo_realsense_t265.cc)
-    target_link_libraries(stereo_realsense_t265_old ${PROJECT_NAME})
-
-    add_executable(stereo_realsense_D435i_old
-            Examples_old/Stereo/stereo_realsense_D435i.cc)
-    target_link_libraries(stereo_realsense_D435i_old ${PROJECT_NAME})
-endif()
-
-#Monocular examples
-set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/Examples_old/Monocular)
-
-add_executable(mono_tum_old
-        Examples_old/Monocular/mono_tum.cc)
-target_link_libraries(mono_tum_old ${PROJECT_NAME})
-
-add_executable(mono_kitti_old
-        Examples_old/Monocular/mono_kitti.cc)
-target_link_libraries(mono_kitti_old ${PROJECT_NAME})
-
-add_executable(mono_euroc_old
-        Examples_old/Monocular/mono_euroc.cc)
-target_link_libraries(mono_euroc_old ${PROJECT_NAME})
-
-add_executable(mono_tum_vi_old
-        Examples_old/Monocular/mono_tum_vi.cc)
-target_link_libraries(mono_tum_vi_old ${PROJECT_NAME})
-
-if(realsense2_FOUND)
-    add_executable(mono_realsense_t265_old
-            Examples_old/Monocular/mono_realsense_t265.cc)
-    target_link_libraries(mono_realsense_t265_old ${PROJECT_NAME})
-
-    add_executable(mono_realsense_D435i_old
-            Examples_old/Monocular/mono_realsense_D435i.cc)
-    target_link_libraries(mono_realsense_D435i_old ${PROJECT_NAME})
-endif()
-
-#Monocular inertial examples
-set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/Examples_old/Monocular-Inertial)
-
-add_executable(mono_inertial_euroc_old
-        Examples_old/Monocular-Inertial/mono_inertial_euroc.cc)
-target_link_libraries(mono_inertial_euroc_old ${PROJECT_NAME})
-
-add_executable(mono_inertial_tum_vi_old
-        Examples_old/Monocular-Inertial/mono_inertial_tum_vi.cc)
-target_link_libraries(mono_inertial_tum_vi_old ${PROJECT_NAME})
-
-if(realsense2_FOUND)
-    add_executable(mono_inertial_realsense_t265_old
-            Examples_old/Monocular-Inertial/mono_inertial_realsense_t265.cc)
-    target_link_libraries(mono_inertial_realsense_t265_old ${PROJECT_NAME})
-
-    add_executable(mono_inertial_realsense_D435i_old
-            Examples_old/Monocular-Inertial/mono_inertial_realsense_D435i.cc)
-    target_link_libraries(mono_inertial_realsense_D435i_old ${PROJECT_NAME})
-endif()
+	add_executable(rgbd_tum_old
+			Examples_old/RGB-D/rgbd_tum.cc)
+	target_link_libraries(rgbd_tum_old ${PROJECT_NAME})
 
-#Stereo Inertial examples
-set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/Examples_old/Stereo-Inertial)
-
-add_executable(stereo_inertial_euroc_old
-        Examples_old/Stereo-Inertial/stereo_inertial_euroc.cc)
-target_link_libraries(stereo_inertial_euroc_old ${PROJECT_NAME})
+	if(realsense2_FOUND)
+		add_executable(rgbd_realsense_D435i_old
+				Examples_old/RGB-D/rgbd_realsense_D435i.cc)
+		target_link_libraries(rgbd_realsense_D435i_old ${PROJECT_NAME})
+	endif()
 
-add_executable(stereo_inertial_tum_vi_old
-        Examples_old/Stereo-Inertial/stereo_inertial_tum_vi.cc)
-target_link_libraries(stereo_inertial_tum_vi_old ${PROJECT_NAME})
 
-if(realsense2_FOUND)
-    add_executable(stereo_inertial_realsense_t265_old
-            Examples_old/Stereo-Inertial/stereo_inertial_realsense_t265.cc)
-    target_link_libraries(stereo_inertial_realsense_t265_old ${PROJECT_NAME})
+	# RGB-D inertial examples
+	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/Examples_old/RGB-D-Inertial)
 
-    add_executable(stereo_inertial_realsense_D435i_old
-            Examples_old/Stereo-Inertial/stereo_inertial_realsense_D435i.cc)
-    target_link_libraries(stereo_inertial_realsense_D435i_old ${PROJECT_NAME})
+	if(realsense2_FOUND)
+		add_executable(rgbd_inertial_realsense_D435i_old
+				Examples_old/RGB-D-Inertial/rgbd_inertial_realsense_D435i.cc)
+		target_link_libraries(rgbd_inertial_realsense_D435i_old ${PROJECT_NAME})
+	endif()
+
+	#Stereo examples
+	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/Examples_old/Stereo)
+
+	add_executable(stereo_kitti_old
+			Examples_old/Stereo/stereo_kitti.cc)
+	target_link_libraries(stereo_kitti_old ${PROJECT_NAME})
+
+	add_executable(stereo_euroc_old
+			Examples_old/Stereo/stereo_euroc.cc)
+	target_link_libraries(stereo_euroc_old ${PROJECT_NAME})
+
+	add_executable(stereo_tum_vi_old
+			Examples_old/Stereo/stereo_tum_vi.cc)
+	target_link_libraries(stereo_tum_vi_old ${PROJECT_NAME})
+
+	if(realsense2_FOUND)
+		add_executable(stereo_realsense_t265_old
+				Examples_old/Stereo/stereo_realsense_t265.cc)
+		target_link_libraries(stereo_realsense_t265_old ${PROJECT_NAME})
+
+		add_executable(stereo_realsense_D435i_old
+				Examples_old/Stereo/stereo_realsense_D435i.cc)
+		target_link_libraries(stereo_realsense_D435i_old ${PROJECT_NAME})
+	endif()
+
+	#Monocular examples
+	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/Examples_old/Monocular)
+
+	add_executable(mono_tum_old
+			Examples_old/Monocular/mono_tum.cc)
+	target_link_libraries(mono_tum_old ${PROJECT_NAME})
+
+	add_executable(mono_kitti_old
+			Examples_old/Monocular/mono_kitti.cc)
+	target_link_libraries(mono_kitti_old ${PROJECT_NAME})
+
+	add_executable(mono_euroc_old
+			Examples_old/Monocular/mono_euroc.cc)
+	target_link_libraries(mono_euroc_old ${PROJECT_NAME})
+
+	add_executable(mono_tum_vi_old
+			Examples_old/Monocular/mono_tum_vi.cc)
+	target_link_libraries(mono_tum_vi_old ${PROJECT_NAME})
+
+	if(realsense2_FOUND)
+		add_executable(mono_realsense_t265_old
+				Examples_old/Monocular/mono_realsense_t265.cc)
+		target_link_libraries(mono_realsense_t265_old ${PROJECT_NAME})
+
+		add_executable(mono_realsense_D435i_old
+				Examples_old/Monocular/mono_realsense_D435i.cc)
+		target_link_libraries(mono_realsense_D435i_old ${PROJECT_NAME})
+	endif()
+
+	#Monocular inertial examples
+	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/Examples_old/Monocular-Inertial)
+
+	add_executable(mono_inertial_euroc_old
+			Examples_old/Monocular-Inertial/mono_inertial_euroc.cc)
+	target_link_libraries(mono_inertial_euroc_old ${PROJECT_NAME})
+
+	add_executable(mono_inertial_tum_vi_old
+			Examples_old/Monocular-Inertial/mono_inertial_tum_vi.cc)
+	target_link_libraries(mono_inertial_tum_vi_old ${PROJECT_NAME})
+
+	if(realsense2_FOUND)
+		add_executable(mono_inertial_realsense_t265_old
+				Examples_old/Monocular-Inertial/mono_inertial_realsense_t265.cc)
+		target_link_libraries(mono_inertial_realsense_t265_old ${PROJECT_NAME})
+
+		add_executable(mono_inertial_realsense_D435i_old
+				Examples_old/Monocular-Inertial/mono_inertial_realsense_D435i.cc)
+		target_link_libraries(mono_inertial_realsense_D435i_old ${PROJECT_NAME})
+	endif()
+
+	#Stereo Inertial examples
+	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_SOURCE_DIR}/Examples_old/Stereo-Inertial)
+
+	add_executable(stereo_inertial_euroc_old
+			Examples_old/Stereo-Inertial/stereo_inertial_euroc.cc)
+	target_link_libraries(stereo_inertial_euroc_old ${PROJECT_NAME})
+
+	add_executable(stereo_inertial_tum_vi_old
+			Examples_old/Stereo-Inertial/stereo_inertial_tum_vi.cc)
+	target_link_libraries(stereo_inertial_tum_vi_old ${PROJECT_NAME})
+
+	if(realsense2_FOUND)
+		add_executable(stereo_inertial_realsense_t265_old
+				Examples_old/Stereo-Inertial/stereo_inertial_realsense_t265.cc)
+		target_link_libraries(stereo_inertial_realsense_t265_old ${PROJECT_NAME})
+
+		add_executable(stereo_inertial_realsense_D435i_old
+				Examples_old/Stereo-Inertial/stereo_inertial_realsense_D435i.cc)
+		target_link_libraries(stereo_inertial_realsense_D435i_old ${PROJECT_NAME})
+	endif()
 endif()
diff --git a/Thirdparty/DBoW2/CMakeLists.txt b/Thirdparty/DBoW2/CMakeLists.txt
index c312b25..1a4295f 100644
--- a/Thirdparty/DBoW2/CMakeLists.txt
+++ b/Thirdparty/DBoW2/CMakeLists.txt
@@ -1,6 +1,22 @@
 cmake_minimum_required(VERSION 2.8)
 project(DBoW2)
 
+include(CMakeDependentOption)
+cmake_dependent_option(
+  DBOW2_STATIC              # option variable
+  "Build static library"    # description
+  ON                        # default value if exposed; user can override
+  "NOT BUILD_SHARED_LIBS"   # condition to expose option
+  OFF                       # value if not exposed; user can't override
+)
+
+# set build type based on dependent option
+if(DBOW2_STATIC)
+  set(DBOW2_BUILD_TYPE STATIC)
+else()
+  set(DBOW2_BUILD_TYPE SHARED)
+endif()
+
 if(NOT CMAKE_BUILD_TYPE)
   set(CMAKE_BUILD_TYPE Release)
 endif()
@@ -40,6 +56,6 @@ endif()
 set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)
 
 include_directories(${OpenCV_INCLUDE_DIRS})
-add_library(DBoW2 SHARED ${SRCS_DBOW2} ${SRCS_DUTILS})
+add_library(DBoW2 ${DBOW2_BUILD_TYPE} ${SRCS_DBOW2} ${SRCS_DUTILS})
 target_link_libraries(DBoW2 ${OpenCV_LIBS})
 
diff --git a/Thirdparty/Sophus/CMakeLists.txt b/Thirdparty/Sophus/CMakeLists.txt
index 933445b..e283786 100644
--- a/Thirdparty/Sophus/CMakeLists.txt
+++ b/Thirdparty/Sophus/CMakeLists.txt
@@ -16,11 +16,11 @@ set(CMAKE_CXX_STANDARD 11)
 IF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    SET(CMAKE_CXX_FLAGS_DEBUG  "-O0 -g")
    SET(CMAKE_CXX_FLAGS_RELEASE "-O3")
-   SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Werror -Wextra  -Wno-deprecated-register -Qunused-arguments -fcolor-diagnostics")
+   SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Werror -Wextra -Wno-array-bounds -Wno-deprecated-register -Qunused-arguments -fcolor-diagnostics")
 ELSEIF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    SET(CMAKE_CXX_FLAGS_DEBUG  "-O0 -g")
    SET(CMAKE_CXX_FLAGS_RELEASE "-O3")
-   SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Werror -Wextra -std=c++11 -Wno-deprecated-declarations -ftemplate-backtrace-limit=0")
+   SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Werror -Wextra -std=c++11 -Wno-array-bounds -Wno-deprecated-declarations -ftemplate-backtrace-limit=0")
    SET(CMAKE_CXX_FLAGS_COVERAGE "${CMAKE_CXX_FLAGS_DEBUG} --coverage -fno-inline -fno-inline-small-functions -fno-default-inline")
    SET(CMAKE_EXE_LINKER_FLAGS_COVERAGE "${CMAKE_EXE_LINKER_FLAGS_DEBUG} --coverage")
    SET(CMAKE_SHARED_LINKER_FLAGS_COVERAGE "${CMAKE_SHARED_LINKER_FLAGS_DEBUG} --coverage")
diff --git a/Thirdparty/g2o/CMakeLists.txt b/Thirdparty/g2o/CMakeLists.txt
index 1a32ff9..2e29f57 100644
--- a/Thirdparty/g2o/CMakeLists.txt
+++ b/Thirdparty/g2o/CMakeLists.txt
@@ -6,6 +6,26 @@ PROJECT(g2o)
 SET(g2o_C_FLAGS)
 SET(g2o_CXX_FLAGS)
 
+include(CMakeDependentOption)
+cmake_dependent_option(
+  G2O_STATIC                # option variable
+  "Build static library"    # description
+  ON                        # default value if exposed; user can override
+  "NOT BUILD_SHARED_LIBS"   # condition to expose option
+  OFF                       # value if not exposed; user can't override
+)
+
+# set build type based on dependent option
+if(G2O_STATIC)
+  set(G2O_BUILD_TYPE STATIC)
+else()
+  set(G2O_BUILD_TYPE SHARED)
+endif()
+
+if(NOT CMAKE_BUILD_TYPE)
+  set(CMAKE_BUILD_TYPE Release)
+endif()
+
 # default built type
 if(NOT CMAKE_BUILD_TYPE)
   set(CMAKE_BUILD_TYPE Release)
@@ -13,8 +33,6 @@ endif()
 
 MESSAGE(STATUS "BUILD TYPE:" ${CMAKE_BUILD_TYPE})
 
-SET (G2O_LIB_TYPE SHARED)
-
 # There seems to be an issue with MSVC8
 # see http://eigen.tuxfamily.org/bz/show_bug.cgi?id=83
 if(MSVC90)
@@ -88,7 +106,7 @@ ${g2o_SOURCE_DIR}/stuff
 ${G2O_EIGEN3_INCLUDE})
 
 # Include the subdirectories
-ADD_LIBRARY(g2o ${G2O_LIB_TYPE}
+ADD_LIBRARY(g2o ${G2O_BUILD_TYPE}
 #types
 g2o/types/types_sba.h
 g2o/types/types_six_dof_expmap.h
diff --git a/build.sh b/build.sh
index 1c0f00a..10234a3 100755
--- a/build.sh
+++ b/build.sh
@@ -1,4 +1,4 @@
-echo "Configuring and building Thirdparty/DBoW2 ..."
+#!/usr/bin/env bash
 
 cd Thirdparty/DBoW2
 mkdir build
@@ -24,22 +24,6 @@ cd build
 cmake .. -DCMAKE_BUILD_TYPE=Release
 make -j
 
-cd ../../../Thirdparty
-echo "Cloning Pangolin repo..."
-git clone --recursive https://github.com/stevenlovegrove/Pangolin.git
-cd Pangolin
-echo "Installing prerequisites..."
-dependencies=$(./scripts/install_prerequisites.sh --list)
-apt-get install -y ${dependencies}
-echo "Configuring and building Thirdparty/Pangolin ..."
-mkdir build
-cd build
-cmake .. -DCMAKE_BUILD_TYPE=Release
-make -j
-make install 
-echo "ldd pangolin.."
-ldd /usr/local/lib/libpango_display.so.0
-
 cd ../../../Vocabulary
 echo "Uncompress vocabulary ..."
 tar -xf ORBvoc.txt.tar.gz
diff --git a/debian/control b/debian/control
index 43f8a47..09eaf41 100644
--- a/debian/control
+++ b/debian/control
@@ -2,20 +2,29 @@ Source: orb-slam3
 Section: utils
 Priority: optional
 Maintainer: ECI Maintainer <eci.maintainer@intel.com>
-Build-Depends: debhelper (>= 12), cmake (>= 3.10), g++ (>= 8), libopencv-dev, libeigen3-dev, libboost-all-dev, libsdl2-dev, libssl-dev, libprotobuf-dev, librealsense2-dev, python3-wheel
+Build-Depends: debhelper (>= 12), cmake (>= 3.10), g++ (>= 8), libpangolin-dev, libopencv-dev, libeigen3-dev, libboost-all-dev, libsdl2-dev, libssl-dev, libprotobuf-dev, librealsense2-dev, libepoxy-dev, python3-wheel
 Standards-Version: 4.1.4
 
 Package: orb-slam3
 Architecture: any
 Multi-Arch: foreign
-Depends: ${misc:Depends}, ${shlibs:Depends}, libopencv-dev, libeigen3-dev, libboost-all-dev, libssl-dev, librealsense2-dev
+Depends: liborb-slam3 (= ${binary:Version}), ${misc:Depends}
 Description: ORB-SLAM3: A robust and efficient SLAM system
  ORB-SLAM3 is a state-of-the-art Visual SLAM system for monocular, stereo, and RGB-D cameras, along with inertial 
  measurement units (IMU). It builds and maintains a 3D map of the environment using various sensor inputs and performs 
  real-time localization and mapping.
 
-Package: orb-slam3-dev
+Package: liborb-slam3
+Architecture: any
+Multi-Arch: foreign
+Depends: ${misc:Depends}, ${shlibs:Depends}, libpangolin
+Description: ORB-SLAM3: A robust and efficient SLAM system
+ ORB-SLAM3 is a state-of-the-art Visual SLAM system for monocular, stereo, and RGB-D cameras, along with inertial 
+ measurement units (IMU). It builds and maintains a 3D map of the environment using various sensor inputs and performs 
+ real-time localization and mapping.
+
+Package: liborb-slam3-dev
 Section: libdevel
 Architecture: any
-Depends: orb-slam3 (= ${binary:Version}), ${misc:Depends}
+Depends: liborb-slam3 (= ${binary:Version}), ${misc:Depends}
 Description: ORB SLAM3 development headers
diff --git a/debian/liborb-slam3-dev.install b/debian/liborb-slam3-dev.install
new file mode 100644
index 0000000..67d7936
--- /dev/null
+++ b/debian/liborb-slam3-dev.install
@@ -0,0 +1 @@
+/usr/include/*
diff --git a/debian/liborb-slam3.install b/debian/liborb-slam3.install
new file mode 100644
index 0000000..f5b1d25
--- /dev/null
+++ b/debian/liborb-slam3.install
@@ -0,0 +1 @@
+/usr/lib/*
diff --git a/debian/orb-slam3-dev.install b/debian/orb-slam3-dev.install
deleted file mode 100644
index 8787c1b..0000000
--- a/debian/orb-slam3-dev.install
+++ /dev/null
@@ -1 +0,0 @@
-usr/include
\ No newline at end of file
diff --git a/debian/orb-slam3.install b/debian/orb-slam3.install
index 0d5487b..4d147b0 100644
--- a/debian/orb-slam3.install
+++ b/debian/orb-slam3.install
@@ -1 +1 @@
-usr/lib
\ No newline at end of file
+/opt/intel/orb-slam3/*
diff --git a/debian/orb-slam3.substvars b/debian/orb-slam3.substvars
deleted file mode 100644
index 8d8fb32..0000000
--- a/debian/orb-slam3.substvars
+++ /dev/null
@@ -1,3 +0,0 @@
-libpango_display.so.0 /usr/local/lib/libpango_display.so.0
-libDBoW2.so /usr/local/lib/libDBoW2.so
-libg2o.so /usr/local/lib/libg2o.so
\ No newline at end of file
diff --git a/debian/rules b/debian/rules
index f75ae92..9b52513 100755
--- a/debian/rules
+++ b/debian/rules
@@ -5,14 +5,41 @@ export DEB_BUILD_MAINT_OPTIONS = hardening=+all
 export DEB_HOST_MULTIARCH := $(shell dpkg-architecture -qDEB_HOST_MULTIARCH)
 export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
 
+BUILD_DIR_DBOW2=$(CURDIR)/build_dbow2
+BUILD_DIR_G2O=$(CURDIR)/build_g2o
+BUILD_DIR_SOPHUS=$(CURDIR)/build_sophus
 
 %:
 	dh $@ --parallel
 
 # Override the default configure step to include custom third-party library builds
 override_dh_auto_configure:
-# Building Thirdparty dependencies (DBoW2, g2o, Sophus, Pangolin) and run build script
-	./build.sh
+# Building Thirdparty dependencies (DBoW2, g2o, Sophus) and run build script
+	dh_auto_configure \
+		-O--sourcedir=$(CURDIR)/Thirdparty/DBoW2/ \
+		--builddir=$(BUILD_DIR_DBOW2) -- \
+		-DBOW2_STATIC=1
+	dh_auto_configure \
+		-O--sourcedir=$(CURDIR)/Thirdparty/g2o/ \
+		--builddir=$(BUILD_DIR_G2O) -- \
+		-DG2O_STATIC=1
+	dh_auto_configure \
+		-O--sourcedir=$(CURDIR)/Thirdparty/Sophus/ \
+		--builddir=$(BUILD_DIR_SOPHUS)
+	dh_auto_configure -- -DLINK_LIBRARY_STATIC=1
+
+# Override the default build step to include custom third-party library builds
+override_dh_auto_build:
+	dh_auto_build \
+		-O--sourcedir=$(CURDIR)/Thirdparty/DBoW2/ \
+		--builddir=$(BUILD_DIR_DBOW2) -- && \
+	dh_auto_build \
+		-O--sourcedir=$(CURDIR)/Thirdparty/g2o/ \
+		--builddir=$(BUILD_DIR_G2O) -- && \
+	dh_auto_build \
+		-O--sourcedir=$(CURDIR)/Thirdparty/Sophus/ \
+		--builddir=$(BUILD_DIR_SOPHUS) -- && \
+	dh_auto_build
 
 override_dh_shlibdeps:
 	dh_shlibdeps --dpkg-shlibdeps-params=--ignore-missing-info
@@ -20,25 +47,27 @@ override_dh_shlibdeps:
 # Override the default install step to handle custom installation paths and files
 override_dh_install:
 # Install libraries and headers
-	install -d debian/orb-slam3/usr/lib/$(DEB_HOST_MULTIARCH)
-	install -d debian/orb-slam3/usr/include/orb-slam3
-	install -d debian/orb-slam3/opt/intel/orb-slam3/Vocabulary
-	install -d debian/orb-slam3/opt/intel/orb-slam3/Examples
-	ls -lah
-	install -m 0755 lib/libORB_SLAM3.so debian/orb-slam3/usr/lib/$(DEB_HOST_MULTIARCH)
-	install -m 0755 Thirdparty/g2o/lib/libg2o.so debian/orb-slam3/usr/lib/$(DEB_HOST_MULTIARCH)
-	install -m 0755 Thirdparty/DBoW2/lib/libDBoW2.so debian/orb-slam3/usr/lib/$(DEB_HOST_MULTIARCH)
-	cp -r include/* debian/orb-slam3/usr/include/orb-slam3
-
-	cp Vocabulary/ORBvoc.txt debian/orb-slam3/opt/intel/orb-slam3/Vocabulary
-	cp -r Examples/* debian/orb-slam3/opt/intel/orb-slam3/Examples
-	find debian/orb-slam3/opt/intel/orb-slam3 -name "*.cc" | xargs rm
-	find debian/orb-slam3/opt/intel/orb-slam3/Examples/ -name "TUM_TimeStamps" | xargs rm -rf
-	find debian/orb-slam3/opt/intel/orb-slam3/Examples/ -name "TUM_IMU" | xargs rm -rf
-	rm -r debian/orb-slam3/opt/intel/orb-slam3/Examples/Monocular-Inertial/EuRoC_TimeStamps
-	rm -r debian/orb-slam3/opt/intel/orb-slam3/Examples/Monocular-Inertial/EuRoC_IMU
+	install -d $(CURDIR)/debian/tmp/usr/lib/$(DEB_HOST_MULTIARCH)
+	install -d $(CURDIR)/debian/tmp/usr/include/orb-slam3
+	install -d $(CURDIR)/debian/tmp/opt/intel/orb-slam3/Vocabulary
+	install -d $(CURDIR)/debian/tmp/opt/intel/orb-slam3/Examples
+	install -m 0755 lib/libORB_SLAM3.so $(CURDIR)/debian/tmp/usr/lib/$(DEB_HOST_MULTIARCH)
+	cp -r include/* $(CURDIR)/debian/tmp/usr/include/orb-slam3
+
+	tar xf Vocabulary/ORBvoc.txt.tar.gz -C Vocabulary
+	cp Vocabulary/ORBvoc.txt $(CURDIR)/debian/tmp/opt/intel/orb-slam3/Vocabulary
+	cp -r Examples/* $(CURDIR)/debian/tmp/opt/intel/orb-slam3/Examples
+	find $(CURDIR)/debian/tmp/opt/intel/orb-slam3 -name "*.cc" | xargs rm
+	find $(CURDIR)/debian/tmp/opt/intel/orb-slam3/Examples/ -name "TUM_TimeStamps" | xargs rm -rf
+	find $(CURDIR)/debian/tmp/opt/intel/orb-slam3/Examples/ -name "TUM_IMU" | xargs rm -rf
+	rm -r $(CURDIR)/debian/tmp/opt/intel/orb-slam3/Examples/Monocular-Inertial/EuRoC_TimeStamps
+	rm -r $(CURDIR)/debian/tmp/opt/intel/orb-slam3/Examples/Monocular-Inertial/EuRoC_IMU
+	dh_install --
 
 # Clean up any temporary files that were generated during the build
 override_dh_clean:
 # Perform cleanup after the build
 	dh_clean
+
+override_dh_auto_test:
+	true
-- 
2.30.2

